pipline{
    agent any
    stages{
        stage('deploy start'){
            // 배포 작업 이전에 배포 시작 알림 메시지를 슬랙 채널로 전송
            // 자격증명을 젠키스에서 구성한 slack-key로 사용
            steps{
                slackSend(message: "Deploy ${env.BUILD_NUMBER} Started", color: 'good', tokenCredentialId: 'slack-key')
            }
        }
        // 깃허브 저장소에서 야믈 파일 받기
        stage('git pull'){
            steps{
                git url: 'https://github.com/akm4545/k8s-GitOps-study.git', branch: 'main'
            }
        }
        // 미리 설정한 kubeconfig 자격 증명을 이용해 현재 내려받은 경로에 존재하는 야믈 파일들의 내용을
        // 쿠버네티스 클러스터에 배포
        stage('k8s deploy'){
            steps{
                kubernetesDeploy(kubeconfigId: 'kubeconfig', configs: '*.yaml')
            }
        }
        stage('send diff'){
            steps{
                // 이전 배포와 현재 배포의 코드 변동 사항을 html로 작성
                //Last Changes 플로그인에서는 Pipline 프로젝트에서 사용하는 선언적 문법 사용 불가
                // 그루비 스크립트를 사용해서 이전 배포의 차이를 찾아 작성
                script{
                    def publisher = LastChanges.getLastChangesPublisher "PREVIOUS_REVISION", "SIDE", "LINE", true, true, "", "", "", "", ""
                    publisher.publishLastChanges()
                    def htmlDiff = publisher.getHtmlDiff()
                    writeFile file: "deploy-diff-${env.BUILD_NUMBER}.html", text: htmlDiff
                }
                // 변경 사항을 확인할 수 있는 주소를 슬랙으로 전달
                slackSend(message: """${env.JOB_NAME} #${env.BUILD_NUMBER} End (<${env.BUILD_URL}/last-changes|Check Last changed>)""", color: 'good', tokenCredentialId: 'slack-key')
            }
        }


        stage('deploy end'){
            // 배포 이후 배포 완료 메시지 슬랙 채널로 전송
            steps{
                slackSend(message: """${env.JOB_NAME} #${env.BUILD_NUMBER} End""", color: 'good', tokenCredentialId: 'slack-key')
            }
        }
    }
}